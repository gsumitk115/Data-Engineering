{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dsCustomer",
						"type": "DatasetReference"
					},
					"name": "ADLSSource"
				},
				{
					"dataset": {
						"referenceName": "ds_AzureSql",
						"type": "DatasetReference"
					},
					"name": "azuresqlsource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_AzureSql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_AzureSql",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_AzureSql",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "SourceHash"
				},
				{
					"name": "newrecord"
				},
				{
					"name": "filter1"
				},
				{
					"name": "TargetHash"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "exists2"
				},
				{
					"name": "exists3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "alterRow3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Customer_ID as integer,",
				"          Customer_Name as string,",
				"          Country as string,",
				"          Start_date as date 'dd-MM-yyyy'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ADLSSource",
				"source(output(",
				"          Customer_ID as integer,",
				"          Customer_Name as string,",
				"          Country as string,",
				"          Start_date as date,",
				"          End_date as date,",
				"          IsActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> azuresqlsource",
				"ADLSSource select(mapColumn(",
				"          Customer_ID,",
				"          Customer_Name,",
				"          Country,",
				"          Start_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(SourceHashValue = md5(Customer_ID,Customer_Name)) ~> SourceHash",
				"SourceHash, TargetHash exists(SourceHashValue == TargetHashValue,",
				"     negate:true,",
				"     broadcast: 'auto')~> newrecord",
				"azuresqlsource filter(IsActive == 1) ~> filter1",
				"filter1 derive(TargetHashValue = md5(Customer_ID,Customer_Name)) ~> TargetHash",
				"newrecord derive(End_Date = toDate('2099-12-31'),",
				"          IsActive = 1) ~> derivedColumn1",
				"derivedColumn1 alterRow(insertIf(true())) ~> alterRow1",
				"TargetHash, SourceHash exists(azuresqlsource@Customer_ID== select1@Customer_ID && azuresqlsource@Customer_Name == select1@Customer_Name && azuresqlsource@Country!= select1@Country,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"SourceHash, azuresqlsource exists(select1@Customer_ID == azuresqlsource@Customer_ID && select1@Customer_Name == azuresqlsource@Customer_Name && select1@Country != azuresqlsource@Country && IsActive != 0,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists3",
				"exists3 derive(End_date = toDate('2099-12-31'),",
				"          IsActive = 1) ~> derivedColumn2",
				"derivedColumn2 alterRow(insertIf(true())) ~> alterRow2",
				"exists2 derive(End_date = toDate(currentUTC()),",
				"          IsActive = 0) ~> derivedColumn3",
				"derivedColumn3 alterRow(updateIf(true())) ~> alterRow3",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Customer_ID as integer,",
				"          Customer_Name as string,",
				"          Country as string,",
				"          Start_date as date,",
				"          End_date as date,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Customer_ID,",
				"          Customer_Name,",
				"          Country,",
				"          Start_date,",
				"          End_date = End_Date,",
				"          IsActive",
				"     ),",
				"     preCommands: [],",
				"     postCommands: []) ~> sink1",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Customer_ID as integer,",
				"          Customer_Name as string,",
				"          Country as string,",
				"          Start_date as date,",
				"          End_date as date,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Customer_ID as integer,",
				"          Customer_Name as string,",
				"          Country as string,",
				"          Start_date as date,",
				"          End_date as date,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Customer_ID','Customer_Name'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink3"
			]
		}
	}
}